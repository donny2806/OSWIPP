// js/chat.js
// Script ini mengelola fungsionalitas live chat, termasuk mengirim dan menerima pesan,
// serta menampilkan pesan dalam jendela chat.

document.addEventListener('DOMContentLoaded', function() {
    const chatWindow = document.getElementById('chatWindow');
    const chatMessages = document.getElementById('chatMessages');
    const chatInput = document.getElementById('chatInput');
    const sendMessageBtn = document.getElementById('sendMessageBtn');
    const sendImageBtn = document.getElementById('sendImageBtn');
    const chatImageInput = document.getElementById('chatImageInput');

    // Pastikan window.loggedInUserId tersedia dari header.php
    const currentLoggedInUserId = window.loggedInUserId;
    if (currentLoggedInUserId === null || typeof currentLoggedInUserId === 'undefined') {
        console.error("User ID not available for chat. Make sure header.php sets window.loggedInUserId correctly.");
        chatMessages.innerHTML = '<div class="text-center text-red-500 text-sm mt-4">Chat tidak tersedia. Silakan login kembali atau hubungi dukungan.</div>';
        // Nonaktifkan input chat jika user ID tidak ada
        chatInput.disabled = true;
        sendMessageBtn.disabled = true;
        sendImageBtn.disabled = true;
        return; // Hentikan eksekusi script chat
    }

    // Variabel untuk menyimpan jumlah pesan terakhir yang dimuat
    let lastMessageCount = 0;

    // Fungsi untuk memainkan suara notifikasi
    function playNotificationSound() {
        try {
            // Menggunakan Tone.js atau Web Audio API sederhana
            // Untuk kesederhanaan, kita bisa menggunakan buzzer sederhana
            const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioCtx.createOscillator();
            const gainNode = audioCtx.createGain();

            oscillator.connect(gainNode);
            gainNode.connect(audioCtx.destination);

            oscillator.type = 'sine'; // Tipe gelombang: sine, square, sawtooth, triangle
            oscillator.frequency.setValueAtTime(440, audioCtx.currentTime); // Frekuensi (Hz)
            gainNode.gain.setValueAtTime(0.5, audioCtx.currentTime); // Volume

            oscillator.start();
            gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.5); // Fade out
            oscillator.stop(audioCtx.currentTime + 0.5); // Berhenti setelah 0.5 detik
        } catch (e) {
            console.warn("Gagal memainkan suara notifikasi:", e);
            // Ini mungkin terjadi jika AudioContext tidak diizinkan tanpa interaksi user
        }
    }

    // Fungsi untuk memuat pesan chat dari server
    async function loadChatMessages() {
        console.log('Memulai pemuatan pesan chat untuk user ID:', currentLoggedInUserId);
        try {
            // Mengambil chat history. Untuk user, ini akan mengambil pesan mereka dengan admin dan broadcast admin.
            const response = await fetch('api/chat_api.php?action=getMessages', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json' // Minta respons JSON
                }
            });

            console.log('Respons fetch diterima:', response);

            if (!response.ok) {
                // Coba baca teks error dari respons
                const errorText = await response.text();
                console.error('Respons non-OK dari chat_api.php:', response.status, errorText);
                throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
            }

            const messages = await response.json();
            console.log('Pesan diterima dari API:', messages);

            // Periksa apakah ada pesan baru
            const newMessagesCount = messages.length;
            if (newMessagesCount > lastMessageCount) {
                // Hanya mainkan notifikasi jika jendela chat tertutup ATAU jika ada pesan baru yang masuk BUKAN dari diri sendiri
                const isChatWindowOpen = chatWindow.style.display === 'flex';
                const lastIncomingMessage = messages.findLast(msg => msg.sender_id != currentLoggedInUserId); // Cari pesan terakhir yang masuk (bukan dari user sendiri)
                
                // Pastikan ada pesan baru dan itu bukan pesan yang kita kirim sendiri
                if (!isChatWindowOpen || (lastIncomingMessage && newMessagesCount > lastMessageCount)) {
                    playNotificationSound();
                }
                lastMessageCount = newMessagesCount;
            } else if (newMessagesCount < lastMessageCount) {
                // Jika jumlah pesan berkurang (misal pesan dihapus admin), reset count
                lastMessageCount = newMessagesCount;
            }


            // Kosongkan pesan yang sudah ada sebelum memuat yang baru
            chatMessages.innerHTML = ''; 

            if (messages.length === 0) {
                chatMessages.innerHTML = '<div class="text-center text-gray-500 text-sm mt-4">Belum ada pesan. Mulai percakapan Anda!</div>';
            } else {
                messages.forEach(msg => {
                    displayMessage(msg);
                });
                // Gulir ke bawah setelah memuat semua pesan
                scrollChatToBottom();
            }
        } catch (error) {
            console.error('Gagal memuat pesan chat:', error);
            chatMessages.innerHTML = '<div class="text-center text-red-500 text-sm mt-4">Gagal memuat pesan. Coba lagi nanti. Cek konsol browser untuk detail.</div>';
        }
    }

    // Fungsi untuk menggulir ke bawah pesan chat
    function scrollChatToBottom() {
        if (chatMessages) {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }

    // Fungsi untuk menampilkan pesan ke UI
    function displayMessage(msg) {
        // Bandingkan sender_id dengan currentLoggedInUserId dari global variable
        const isSent = msg.sender_id == currentLoggedInUserId;
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('chat-message', isSent ? 'sent' : 'received');

        // Tampilkan nama pengirim jika bukan pesan dari diri sendiri
        if (!isSent && msg.sender_username) { 
            const senderName = document.createElement('p');
            senderName.classList.add('font-semibold', 'text-xs', 'text-blue-700', 'mb-1');
            senderName.textContent = msg.sender_username;
            messageDiv.appendChild(senderName);
        }

        if (msg.message) {
            const messageText = document.createElement('p');
            messageText.textContent = msg.message;
            messageDiv.appendChild(messageText);
        }
        if (msg.image_url) {
            const messageImage = document.createElement('img');
            messageImage.src = msg.image_url;
            messageImage.alt = 'Gambar terlampir';
            messageImage.classList.add('block', 'mt-2'); // Tambahkan kelas untuk tampilan
            messageDiv.appendChild(messageImage);
        }
        
        const timestamp = document.createElement('span');
        timestamp.classList.add('timestamp');
        // Format waktu agar lebih mudah dibaca
        const date = new Date(msg.sent_at);
        timestamp.textContent = date.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' }) + ' ' +
                                date.toLocaleDateString('id-ID', { day: '2-digit', month: 'short' });
        messageDiv.appendChild(timestamp);

        chatMessages.appendChild(messageDiv);
    }

    // Fungsi untuk mengirim pesan
    async function sendMessage(messageText, imageUrl = null) {
        if (!messageText && !imageUrl) {
            return; // Jangan kirim pesan kosong
        }

        console.log('Mengirim pesan:', { messageText, imageUrl });

        try {
            const formData = new FormData();
            formData.append('action', 'sendMessage');
            if (messageText) {
                formData.append('message', messageText);
            }
            if (imageUrl) {
                formData.append('image_url', imageUrl);
            }

            const response = await fetch('api/chat_api.php', {
                method: 'POST',
                body: formData
            });

            console.log('Respons kirim pesan diterima:', response);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Respons non-OK saat kirim pesan:', response.status, errorText);
                throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
            }

            const result = await response.json();
            console.log('Hasil kirim pesan API:', result);

            if (result.success) {
                chatInput.value = ''; // Bersihkan input setelah kirim
                chatImageInput.value = ''; // Bersihkan input file
                loadChatMessages(); // Muat ulang pesan untuk melihat pesan baru
            } else {
                console.error('Gagal mengirim pesan (API result success=false):', result.message);
                alert('Gagal mengirim pesan: ' + (result.message || 'Unknown error.'));
            }
        } catch (error) {
            console.error('Error mengirim pesan:', error);
            alert('Terjadi kesalahan saat mengirim pesan. Cek konsol untuk detail.');
        }
    }

    // Event listener untuk tombol kirim pesan
    if (sendMessageBtn) {
        sendMessageBtn.addEventListener('click', function() {
            sendMessage(chatInput.value);
        });
    }

    // Event listener untuk input field (tekan Enter)
    if (chatInput) {
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage(chatInput.value);
            }
        });
    }

    // Event listener untuk tombol kirim gambar
    if (sendImageBtn) {
        sendImageBtn.addEventListener('click', function() {
            chatImageInput.click(); // Memicu klik pada input file tersembunyi
        });
    }

    // Event listener saat file gambar dipilih
    if (chatImageInput) {
        chatImageInput.addEventListener('change', async function(e) {
            const file = e.target.files[0];
            if (file) {
                // Tampilkan indikator loading
                const loadingMessage = document.createElement('div');
                loadingMessage.id = 'upload-loading';
                loadingMessage.classList.add('text-center', 'text-gray-500', 'text-sm', 'my-2');
                loadingMessage.textContent = 'Mengunggah gambar...';
                chatMessages.appendChild(loadingMessage);
                scrollChatToBottom();

                const uploadFormData = new FormData();
                uploadFormData.append('image', file);

                try {
                    console.log('Mengunggah gambar...');
                    const uploadResponse = await fetch('api/upload_image.php', { // Endpoint untuk upload gambar
                        method: 'POST',
                        body: uploadFormData
                    });

                    console.log('Respons upload gambar diterima:', uploadResponse);

                    if (!uploadResponse.ok) {
                        const errorText = await uploadResponse.text();
                        console.error('Respons non-OK saat upload gambar:', uploadResponse.status, errorText);
                        throw new Error(`HTTP error! status: ${uploadResponse.status} - ${errorText}`);
                    }

                    const uploadResult = await uploadResponse.json();
                    console.log('Hasil upload gambar API:', uploadResult);

                    if (uploadResult.success && uploadResult.image_url) {
                        sendMessage(chatInput.value, uploadResult.image_url); // Kirim pesan dengan URL gambar
                    } else {
                        alert('Gagal mengunggah gambar: ' + (uploadResult.message || 'Unknown error.'));
                    }
                } catch (error) {
                    console.error('Error saat mengunggah gambar:', error);
                    alert('Terjadi kesalahan saat mengunggah gambar. Cek konsol untuk detail.');
                } finally {
                    // Hapus indikator loading
                    const loadingIndicator = document.getElementById('upload-loading');
                    if (loadingIndicator) {
                        loadingIndicator.remove();
                    }
                }
            }
        });
    }

    // Muat pesan saat DOM selesai dimuat
    loadChatMessages(); 

    // Muat ulang pesan setiap 3 detik untuk simulasi real-time sederhana
    setInterval(loadChatMessages, 3000); // Setiap 3 detik
});
